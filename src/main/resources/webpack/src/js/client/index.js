/**
 * cInsight-gui
 * The Case Analysis Software
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function (factory) {
    if (false) {
        // AMD. Register as an anonymous module.
        define(['ApiClient', 'model/Attachment', 'model/AttachmentDetail', 'model/AttachmentList', 'model/Attribute', 'model/CaseInfo', 'model/Condition', 'model/ContactDetail', 'model/ContactDetailRelation', 'model/ContactList', 'model/ContactRelation', 'model/Correct', 'model/Diagram', 'model/Error', 'model/History', 'model/HistoryDetail', 'model/InlineResponse200', 'model/Lexicon', 'model/Load', 'model/LoadReport', 'model/LoadState', 'model/MailContact', 'model/MailDetail', 'model/MailList', 'model/Mailbox', 'model/MailboxList', 'model/MailboxStatistics', 'model/Option', 'model/Plugin', 'model/ResultSet', 'model/ResultSetDetail', 'model/SearchCount', 'model/Tag', 'model/TagChild', 'model/UseTag', 'api/AttachmentApi', 'api/CaseApi', 'api/ContactApi', 'api/HistoryApi', 'api/LexiconApi', 'api/LoadApi', 'api/LogoutApi', 'api/MailApi', 'api/MailboxApi', 'api/PluginApi', 'api/ResultsetApi', 'api/SearchApi', 'api/TagApi'], factory);
    } else if (typeof module === 'object' && module.exports) {
        // CommonJS-like environments that support module.exports, like Node.
        module.exports = factory(require('./ApiClient'), require('./model/Attachment'), require('./model/AttachmentDetail'), require('./model/AttachmentList'), require('./model/Attribute'), require('./model/CaseInfo'), require('./model/Condition'), require('./model/ContactDetail'), require('./model/ContactDetailRelation'), require('./model/ContactList'), require('./model/ContactRelation'), require('./model/Correct'), require('./model/Diagram'), require('./model/Error'), require('./model/History'), require('./model/HistoryDetail'), require('./model/InlineResponse200'), require('./model/Lexicon'), require('./model/Load'), require('./model/LoadReport'), require('./model/LoadState'), require('./model/MailContact'), require('./model/MailDetail'), require('./model/MailList'), require('./model/Mailbox'), require('./model/MailboxList'), require('./model/MailboxStatistics'), require('./model/Option'), require('./model/Plugin'), require('./model/ResultSet'), require('./model/ResultSetDetail'), require('./model/SearchCount'), require('./model/Tag'), require('./model/TagChild'), require('./model/UseTag'), require('./api/AttachmentApi'), require('./api/CaseApi'), require('./api/ContactApi'), require('./api/HistoryApi'), require('./api/LexiconApi'), require('./api/LoadApi'), require('./api/LogoutApi'), require('./api/MailApi'), require('./api/MailboxApi'), require('./api/PluginApi'), require('./api/ResultsetApi'), require('./api/SearchApi'), require('./api/TagApi'));
    }
}(function (ApiClient, Attachment, AttachmentDetail, AttachmentList, Attribute, CaseInfo, Condition, ContactDetail, ContactDetailRelation, ContactList, ContactRelation, Correct, Diagram, Error, History, HistoryDetail, InlineResponse200, Lexicon, Load, LoadReport, LoadState, MailContact, MailDetail, MailList, Mailbox, MailboxList, MailboxStatistics, Option, Plugin, ResultSet, ResultSetDetail, SearchCount, Tag, TagChild, UseTag, AttachmentApi, CaseApi, ContactApi, HistoryApi, LexiconApi, LoadApi, LogoutApi, MailApi, MailboxApi, PluginApi, ResultsetApi, SearchApi, TagApi) {
    'use strict';

    /**
     * The_Case_Analysis_Software.<br>
     * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
     * <p>
     * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
     * <pre>
     * var CInsightGui = require('index'); // See note below*.
     * var xxxSvc = new CInsightGui.XxxApi(); // Allocate the API class we're going to use.
     * var yyyModel = new CInsightGui.Yyy(); // Construct a model instance.
     * yyyModel.someProperty = 'someValue';
     * ...
     * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
     * ...
     * </pre>
     * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
     * and put the application logic within the callback function.</em>
     * </p>
     * <p>
     * A non-AMD browser application (discouraged) might do something like this:
     * <pre>
     * var xxxSvc = new CInsightGui.XxxApi(); // Allocate the API class we're going to use.
     * var yyy = new CInsightGui.Yyy(); // Construct a model instance.
     * yyyModel.someProperty = 'someValue';
     * ...
     * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
     * ...
     * </pre>
     * </p>
     * @module index
     * @version 1.0.0
     */
    var exports = {
        /**
         * The ApiClient constructor.
         * @property {module:ApiClient}
         */
        ApiClient: ApiClient,
        /**
         * The Attachment model constructor.
         * @property {module:model/Attachment}
         */
        Attachment: Attachment,
        /**
         * The AttachmentDetail model constructor.
         * @property {module:model/AttachmentDetail}
         */
        AttachmentDetail: AttachmentDetail,
        /**
         * The AttachmentList model constructor.
         * @property {module:model/AttachmentList}
         */
        AttachmentList: AttachmentList,
        /**
         * The Attribute model constructor.
         * @property {module:model/Attribute}
         */
        Attribute: Attribute,
        /**
         * The CaseInfo model constructor.
         * @property {module:model/CaseInfo}
         */
        CaseInfo: CaseInfo,
        /**
         * The Condition model constructor.
         * @property {module:model/Condition}
         */
        Condition: Condition,
        /**
         * The ContactDetail model constructor.
         * @property {module:model/ContactDetail}
         */
        ContactDetail: ContactDetail,
        /**
         * The ContactDetailRelation model constructor.
         * @property {module:model/ContactDetailRelation}
         */
        ContactDetailRelation: ContactDetailRelation,
        /**
         * The ContactList model constructor.
         * @property {module:model/ContactList}
         */
        ContactList: ContactList,
        /**
         * The ContactRelation model constructor.
         * @property {module:model/ContactRelation}
         */
        ContactRelation: ContactRelation,
        /**
         * The Correct model constructor.
         * @property {module:model/Correct}
         */
        Correct: Correct,
        /**
         * The Diagram model constructor.
         * @property {module:model/Diagram}
         */
        Diagram: Diagram,
        /**
         * The Error model constructor.
         * @property {module:model/Error}
         */
        Error: Error,
        /**
         * The History model constructor.
         * @property {module:model/History}
         */
        History: History,
        /**
         * The HistoryDetail model constructor.
         * @property {module:model/HistoryDetail}
         */
        HistoryDetail: HistoryDetail,
        /**
         * The InlineResponse200 model constructor.
         * @property {module:model/InlineResponse200}
         */
        InlineResponse200: InlineResponse200,
        /**
         * The Lexicon model constructor.
         * @property {module:model/Lexicon}
         */
        Lexicon: Lexicon,
        /**
         * The Load model constructor.
         * @property {module:model/Load}
         */
        Load: Load,
        /**
         * The LoadReport model constructor.
         * @property {module:model/LoadReport}
         */
        LoadReport: LoadReport,
        /**
         * The LoadState model constructor.
         * @property {module:model/LoadState}
         */
        LoadState: LoadState,
        /**
         * The MailContact model constructor.
         * @property {module:model/MailContact}
         */
        MailContact: MailContact,
        /**
         * The MailDetail model constructor.
         * @property {module:model/MailDetail}
         */
        MailDetail: MailDetail,
        /**
         * The MailList model constructor.
         * @property {module:model/MailList}
         */
        MailList: MailList,
        /**
         * The Mailbox model constructor.
         * @property {module:model/Mailbox}
         */
        Mailbox: Mailbox,
        /**
         * The MailboxList model constructor.
         * @property {module:model/MailboxList}
         */
        MailboxList: MailboxList,
        /**
         * The MailboxStatistics model constructor.
         * @property {module:model/MailboxStatistics}
         */
        MailboxStatistics: MailboxStatistics,
        /**
         * The Option model constructor.
         * @property {module:model/Option}
         */
        Option: Option,
        /**
         * The Plugin model constructor.
         * @property {module:model/Plugin}
         */
        Plugin: Plugin,
        /**
         * The ResultSet model constructor.
         * @property {module:model/ResultSet}
         */
        ResultSet: ResultSet,
        /**
         * The ResultSetDetail model constructor.
         * @property {module:model/ResultSetDetail}
         */
        ResultSetDetail: ResultSetDetail,
        /**
         * The SearchCount model constructor.
         * @property {module:model/SearchCount}
         */
        SearchCount: SearchCount,
        /**
         * The Tag model constructor.
         * @property {module:model/Tag}
         */
        Tag: Tag,
        /**
         * The TagChild model constructor.
         * @property {module:model/TagChild}
         */
        TagChild: TagChild,
        /**
         * The UseTag model constructor.
         * @property {module:model/UseTag}
         */
        UseTag: UseTag,
        /**
         * The AttachmentApi service constructor.
         * @property {module:api/AttachmentApi}
         */
        AttachmentApi: AttachmentApi,
        /**
         * The CaseApi service constructor.
         * @property {module:api/CaseApi}
         */
        CaseApi: CaseApi,
        /**
         * The ContactApi service constructor.
         * @property {module:api/ContactApi}
         */
        ContactApi: ContactApi,
        /**
         * The HistoryApi service constructor.
         * @property {module:api/HistoryApi}
         */
        HistoryApi: HistoryApi,
        /**
         * The LexiconApi service constructor.
         * @property {module:api/LexiconApi}
         */
        LexiconApi: LexiconApi,
        /**
         * The LoadApi service constructor.
         * @property {module:api/LoadApi}
         */
        LoadApi: LoadApi,
        /**
         * The LogoutApi service constructor.
         * @property {module:api/LogoutApi}
         */
        LogoutApi: LogoutApi,
        /**
         * The MailApi service constructor.
         * @property {module:api/MailApi}
         */
        MailApi: MailApi,
        /**
         * The MailboxApi service constructor.
         * @property {module:api/MailboxApi}
         */
        MailboxApi: MailboxApi,
        /**
         * The PluginApi service constructor.
         * @property {module:api/PluginApi}
         */
        PluginApi: PluginApi,
        /**
         * The ResultsetApi service constructor.
         * @property {module:api/ResultsetApi}
         */
        ResultsetApi: ResultsetApi,
        /**
         * The SearchApi service constructor.
         * @property {module:api/SearchApi}
         */
        SearchApi: SearchApi,
        /**
         * The TagApi service constructor.
         * @property {module:api/TagApi}
         */
        TagApi: TagApi
    };

    var storage = (function (root) {
        if (root)
            return;

        root = {
            data: {},
            set: function (key, value) {
                this.data[key] = value;
            },
            get: function (key) {
                return this.data[key];
            }
        };
        return root;
    })(window.storage);

    for (var key in exports) {
        if (key.endsWith("Api")) {
            var instance = key + "Inst";
            exports[instance] = new exports[key]();
            exports[instance].ciStorage = storage;
        }
    }

    return exports;
}));
