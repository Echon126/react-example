/**
 * cInsight-gui
 * The Case Analysis Software
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (false) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.CInsightGui) {
      root.CInsightGui = {};
    }
    root.CInsightGui.Option = factory(root.CInsightGui.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The Option model module.
   * @module model/Option
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>Option</code>.
   * @alias module:model/Option
   * @class
   */
  var exports = function() {
    var _this = this;




  };

  /**
   * Constructs a <code>Option</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Option} obj Optional instance to populate.
   * @return {module:model/Option} The populated <code>Option</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('optionKey')) {
        obj['optionKey'] = ApiClient.convertToType(data['optionKey'], 'String');
      }
      if (data.hasOwnProperty('optionLabel')) {
        obj['optionLabel'] = ApiClient.convertToType(data['optionLabel'], 'String');
      }
      if (data.hasOwnProperty('optionValue')) {
        obj['optionValue'] = ApiClient.convertToType(data['optionValue'], 'String');
      }
    }
    return obj;
  }

  /**
   * 配置项键名。全局唯一（取值=pluginId.optionId）
   * @member {String} optionKey
   */
  exports.prototype['optionKey'] = undefined;
  /**
   * 配置项名称
   * @member {String} optionLabel
   */
  exports.prototype['optionLabel'] = undefined;
  /**
   * 配置项键值
   * @member {String} optionValue
   */
  exports.prototype['optionValue'] = undefined;



  return exports;
}));


