/**
 * cInsight-gui
 * The Case Analysis Software
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (false) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.CInsightGui) {
      root.CInsightGui = {};
    }
    root.CInsightGui.Lexicon = factory(root.CInsightGui.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The Lexicon model module.
   * @module model/Lexicon
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>Lexicon</code>.
   * @alias module:model/Lexicon
   * @class
   */
  var exports = function() {
    var _this = this;





  };

  /**
   * Constructs a <code>Lexicon</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Lexicon} obj Optional instance to populate.
   * @return {module:model/Lexicon} The populated <code>Lexicon</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('lexiconId')) {
        obj['lexiconId'] = ApiClient.convertToType(data['lexiconId'], 'String');
      }
      if (data.hasOwnProperty('lexiconName')) {
        obj['lexiconName'] = ApiClient.convertToType(data['lexiconName'], 'String');
      }
      if (data.hasOwnProperty('lexiconDescription')) {
        obj['lexiconDescription'] = ApiClient.convertToType(data['lexiconDescription'], 'String');
      }
      if (data.hasOwnProperty('lexiconEnabled')) {
        obj['lexiconEnabled'] = ApiClient.convertToType(data['lexiconEnabled'], 'Boolean');
      }
    }
    return obj;
  }

  /**
   * 词库id
   * @member {String} lexiconId
   */
  exports.prototype['lexiconId'] = undefined;
  /**
   * 词库名称
   * @member {String} lexiconName
   */
  exports.prototype['lexiconName'] = undefined;
  /**
   * 词库备注
   * @member {String} lexiconDescription
   */
  exports.prototype['lexiconDescription'] = undefined;
  /**
   * 词库是否启用
   * @member {Boolean} lexiconEnabled
   */
  exports.prototype['lexiconEnabled'] = undefined;



  return exports;
}));


