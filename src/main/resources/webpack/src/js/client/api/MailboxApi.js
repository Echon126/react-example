/**
 * cInsight-gui
 * The Case Analysis Software
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (false) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/Mailbox', 'model/MailboxList'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/Mailbox'), require('../model/MailboxList'));
  } else {
    // Browser globals (root is window)
    if (!root.CInsightGui) {
      root.CInsightGui = {};
    }
    root.CInsightGui.MailboxApi = factory(root.CInsightGui.ApiClient, root.CInsightGui.Error, root.CInsightGui.Mailbox, root.CInsightGui.MailboxList);
  }
}(this, function(ApiClient, Error, Mailbox, MailboxList) {
  'use strict';

  /**
   * Mailbox service.
   * @module api/MailboxApi
   * @version 1.0.0
   */

  /**
   * Constructs a new MailboxApi. 
   * @alias module:api/MailboxApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getMailboxStatistics operation.
     * @callback module:api/MailboxApi~getMailboxStatisticsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 获取邮箱统计
     * 获取邮箱统计
     * @param {String} caseId 案件id
     * @param {String} mailboxId 邮箱id
     * @param {Object} opts Optional parameters
     * @param {String} opts.from 发件人
     * @param {String} opts.to 收件人
     * @param {String} opts.content 内容关键词
     * @param {String} opts.subject 主题内容关键词
     * @param {String} opts.cc 抄送人
     * @param {module:api/MailboxApi~getMailboxStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getMailboxStatistics = function(caseId, mailboxId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'caseId' is set
      if (caseId == undefined || caseId == null) {
        throw new Error("Missing the required parameter 'caseId' when calling getMailboxStatistics");
      }

      // verify the required parameter 'mailboxId' is set
      if (mailboxId == undefined || mailboxId == null) {
        throw new Error("Missing the required parameter 'mailboxId' when calling getMailboxStatistics");
      }


      var pathParams = {
        'caseId': caseId,
        'mailboxId': mailboxId
      };
      var queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'content': opts['content'],
        'subject': opts['subject'],
        'cc': opts['cc']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/mailbox/{caseId}/{mailboxId}/filter', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the selecDraftboxList operation.
     * @callback module:api/MailboxApi~selecDraftboxListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Mailbox>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 获取所选邮箱中的草稿箱邮件列表
     * 获取所选邮箱中的草稿箱邮件列表
     * @param {String} caseId 案件id
     * @param {String} mailboxId 邮箱id
     * @param {Object} opts Optional parameters
     * @param {String} opts.from 发件人
     * @param {String} opts.to 收件人
     * @param {String} opts.content 内容关键词
     * @param {String} opts.subject 主题内容关键词
     * @param {String} opts.cc 抄送人
     * @param {module:api/MailboxApi~selecDraftboxListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Mailbox>}
     */
    this.selecDraftboxList = function(caseId, mailboxId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'caseId' is set
      if (caseId == undefined || caseId == null) {
        throw new Error("Missing the required parameter 'caseId' when calling selecDraftboxList");
      }

      // verify the required parameter 'mailboxId' is set
      if (mailboxId == undefined || mailboxId == null) {
        throw new Error("Missing the required parameter 'mailboxId' when calling selecDraftboxList");
      }


      var pathParams = {
        'caseId': caseId,
        'mailboxId': mailboxId
      };
      var queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'content': opts['content'],
        'subject': opts['subject'],
        'cc': opts['cc']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Mailbox];

      return this.apiClient.callApi(
        '/mailbox/{caseId}/{mailboxId}/draftbox', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the selecInboxList operation.
     * @callback module:api/MailboxApi~selecInboxListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Mailbox>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 获取所选邮箱中的收件箱邮件列表
     * 获取所选邮箱中的收件箱邮件列表
     * @param {String} caseId 案件id
     * @param {String} mailboxId 邮箱id
     * @param {Object} opts Optional parameters
     * @param {String} opts.from 发件人
     * @param {String} opts.to 收件人
     * @param {String} opts.content 内容关键词
     * @param {String} opts.subject 主题内容关键词
     * @param {String} opts.cc 抄送人
     * @param {module:api/MailboxApi~selecInboxListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Mailbox>}
     */
    this.selecInboxList = function(caseId, mailboxId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'caseId' is set
      if (caseId == undefined || caseId == null) {
        throw new Error("Missing the required parameter 'caseId' when calling selecInboxList");
      }

      // verify the required parameter 'mailboxId' is set
      if (mailboxId == undefined || mailboxId == null) {
        throw new Error("Missing the required parameter 'mailboxId' when calling selecInboxList");
      }


      var pathParams = {
        'caseId': caseId,
        'mailboxId': mailboxId
      };
      var queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'content': opts['content'],
        'subject': opts['subject'],
        'cc': opts['cc']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Mailbox];

      return this.apiClient.callApi(
        '/mailbox/{caseId}/{mailboxId}/inbox', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the selecOutboxList operation.
     * @callback module:api/MailboxApi~selecOutboxListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Mailbox>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 获取所选邮箱中的发件箱邮件列表
     * 获取所选邮箱中的发件箱邮件列表
     * @param {String} caseId 案件id
     * @param {String} mailboxId 邮箱id
     * @param {Object} opts Optional parameters
     * @param {String} opts.from 发件人
     * @param {String} opts.to 收件人
     * @param {String} opts.content 内容关键词
     * @param {String} opts.subject 主题内容关键词
     * @param {String} opts.cc 抄送人
     * @param {module:api/MailboxApi~selecOutboxListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Mailbox>}
     */
    this.selecOutboxList = function(caseId, mailboxId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'caseId' is set
      if (caseId == undefined || caseId == null) {
        throw new Error("Missing the required parameter 'caseId' when calling selecOutboxList");
      }

      // verify the required parameter 'mailboxId' is set
      if (mailboxId == undefined || mailboxId == null) {
        throw new Error("Missing the required parameter 'mailboxId' when calling selecOutboxList");
      }


      var pathParams = {
        'caseId': caseId,
        'mailboxId': mailboxId
      };
      var queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'content': opts['content'],
        'subject': opts['subject'],
        'cc': opts['cc']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Mailbox];

      return this.apiClient.callApi(
        '/mailbox/{caseId}/{mailboxId}/outbox', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the selecTrashList operation.
     * @callback module:api/MailboxApi~selecTrashListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Mailbox>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 获取所选邮箱中的垃圾箱邮件列表
     * 获取所选邮箱中的垃圾箱邮件列表
     * @param {String} caseId 案件id
     * @param {String} mailboxId 邮箱id
     * @param {Object} opts Optional parameters
     * @param {String} opts.from 发件人
     * @param {String} opts.to 收件人
     * @param {String} opts.content 内容关键词
     * @param {String} opts.subject 主题内容关键词
     * @param {String} opts.cc 抄送人
     * @param {module:api/MailboxApi~selecTrashListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Mailbox>}
     */
    this.selecTrashList = function(caseId, mailboxId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'caseId' is set
      if (caseId == undefined || caseId == null) {
        throw new Error("Missing the required parameter 'caseId' when calling selecTrashList");
      }

      // verify the required parameter 'mailboxId' is set
      if (mailboxId == undefined || mailboxId == null) {
        throw new Error("Missing the required parameter 'mailboxId' when calling selecTrashList");
      }


      var pathParams = {
        'caseId': caseId,
        'mailboxId': mailboxId
      };
      var queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'content': opts['content'],
        'subject': opts['subject'],
        'cc': opts['cc']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Mailbox];

      return this.apiClient.callApi(
        '/mailbox/{caseId}/{mailboxId}/trash', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the selectMailboxList operation.
     * @callback module:api/MailboxApi~selectMailboxListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MailboxList>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 获取邮箱列表
     * 获取邮箱列表
     * @param {String} caseId 案件id
     * @param {Object} opts Optional parameters
     * @param {String} opts.conditions 检索条件
     * @param {module:api/MailboxApi~selectMailboxListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MailboxList>}
     */
    this.selectMailboxList = function(caseId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'caseId' is set
      if (caseId == undefined || caseId == null) {
        throw new Error("Missing the required parameter 'caseId' when calling selectMailboxList");
      }


      var pathParams = {
        'caseId': caseId
      };
      var queryParams = {
        'conditions': opts['conditions']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [MailboxList];

      return this.apiClient.callApi(
        '/mailbox/{caseId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMailboxNotes operation.
     * @callback module:api/MailboxApi~updateMailboxNotesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 邮箱批注
     * 邮箱批注
     * @param {String} caseId 案件id
     * @param {String} mailboxId 邮箱id
     * @param {String} notes 批注内容
     * @param {module:api/MailboxApi~updateMailboxNotesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateMailboxNotes = function(caseId, mailboxId, notes, callback) {
      var postBody = null;

      // verify the required parameter 'caseId' is set
      if (caseId == undefined || caseId == null) {
        throw new Error("Missing the required parameter 'caseId' when calling updateMailboxNotes");
      }

      // verify the required parameter 'mailboxId' is set
      if (mailboxId == undefined || mailboxId == null) {
        throw new Error("Missing the required parameter 'mailboxId' when calling updateMailboxNotes");
      }

      // verify the required parameter 'notes' is set
      if (notes == undefined || notes == null) {
        throw new Error("Missing the required parameter 'notes' when calling updateMailboxNotes");
      }


      var pathParams = {
        'caseId': caseId,
        'mailboxId': mailboxId
      };
      var queryParams = {
        'notes': notes
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/mailbox/{caseId}/{mailboxId}/notes', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMailboxTag operation.
     * @callback module:api/MailboxApi~updateMailboxTagCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 邮箱修改标签
     * 邮箱修改标签
     * @param {String} caseId 案件id
     * @param {String} mailboxId 邮箱id
     * @param {String} tags 附加的标签列表：array
     * @param {module:api/MailboxApi~updateMailboxTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateMailboxTag = function(caseId, mailboxId, tags, callback) {
      var postBody = null;

      // verify the required parameter 'caseId' is set
      if (caseId == undefined || caseId == null) {
        throw new Error("Missing the required parameter 'caseId' when calling updateMailboxTag");
      }

      // verify the required parameter 'mailboxId' is set
      if (mailboxId == undefined || mailboxId == null) {
        throw new Error("Missing the required parameter 'mailboxId' when calling updateMailboxTag");
      }

      // verify the required parameter 'tags' is set
      if (tags == undefined || tags == null) {
        throw new Error("Missing the required parameter 'tags' when calling updateMailboxTag");
      }


      var pathParams = {
        'caseId': caseId,
        'mailboxId': mailboxId
      };
      var queryParams = {
        'tags': tags
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/mailbox/{caseId}/{mailboxId}/tag', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
