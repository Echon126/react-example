/**
 * cInsight-gui
 * The Case Analysis Software
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
    if (false) {
        // AMD. Register as an anonymous module.
        define(['ApiClient', 'model/Error'], factory);
    } else if (typeof module === 'object' && module.exports) {
        // CommonJS-like environments that support module.exports, like Node.
        module.exports = factory(require('../ApiClient'), require('../model/Error'));
    } else {
        // Browser globals (root is window)
        if (!root.CInsightGui) {
            root.CInsightGui = {};
        }
        root.CInsightGui.ContactApi = factory(root.CInsightGui.ApiClient, root.CInsightGui.Error);
    }
}(this, function(ApiClient, Error) {
    'use strict';

    /**
     * Contact service.
     * @module api/ContactApi
     * @version 1.0.0
     */

    /**
     * Constructs a new ContactApi.
     * @alias module:api/ContactApi
     * @class
     * @param {module:ApiClient} apiClient Optional API client implementation to use,
     * default to {@link module:ApiClient#instance} if unspecified.
     */
    var exports = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;


        /**
         * Callback function to receive the result of the getContactDetail operation.
         * @callback module:api/ContactApi~getContactDetailCallback
         * @param {String} error Error message, if any.
         * @param {Object} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * 获取联系人详情
         * 获取联系人详情
         * @param {String} caseId 案件id
         * @param {String} contactId 附件id
         * @param {module:api/ContactApi~getContactDetailCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Object}
         */
        this.getContactDetail = function(caseId, contactId, callback) {
            var postBody = null;

            // verify the required parameter 'caseId' is set
            if (caseId == undefined || caseId == null) {
                throw new Error("Missing the required parameter 'caseId' when calling getContactDetail");
            }

            // verify the required parameter 'contactId' is set
            if (contactId == undefined || contactId == null) {
                throw new Error("Missing the required parameter 'contactId' when calling getContactDetail");
            }


            var pathParams = {
                'caseId': caseId,
                'contactId': contactId
            };
            var queryParams = {
            };
            var headerParams = {
            };
            var formParams = {
            };

            var authNames = [];
            var contentTypes = [];
            var accepts = ['application/json'];
            var returnType = Object;

            return this.apiClient.callApi(
                '/contact/{caseId}/{contactId}', 'GET',
                pathParams, queryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType, callback
            );
        }

        /**
         * Callback function to receive the result of the getContactRelationList operation.
         * @callback module:api/ContactApi~getContactRelationListCallback
         * @param {String} error Error message, if any.
         * @param {Object} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * 联系人关系列表
         * 联系人关系列表
         * @param {String} contactId
         * @param {String} relationMail
         * @param {module:api/ContactApi~getContactRelationListCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Object}
         */
        this.getContactRelationList = function(contactId, relationMail, callback) {
            var postBody = null;

            // verify the required parameter 'contactId' is set
            if (contactId == undefined || contactId == null) {
                throw new Error("Missing the required parameter 'contactId' when calling getContactRelationList");
            }

            // verify the required parameter 'relationMail' is set
            if (relationMail == undefined || relationMail == null) {
                throw new Error("Missing the required parameter 'relationMail' when calling getContactRelationList");
            }


            var pathParams = {
                'contactId': contactId
            };
            var queryParams = {
                'relationMail': relationMail
            };
            var headerParams = {
            };
            var formParams = {
            };

            var authNames = [];
            var contentTypes = [];
            var accepts = ['application/json'];
            var returnType = Object;

            return this.apiClient.callApi(
                '/contact/{contactId}/relations', 'GET',
                pathParams, queryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType, callback
            );
        }

        /**
         * Callback function to receive the result of the selectContactList operation.
         * @callback module:api/ContactApi~selectContactListCallback
         * @param {String} error Error message, if any.
         * @param {Object} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * 获取联系人列表
         * 获取联系人列表
         * @param {String} caseId 案件id
         * @param {Object} opts Optional parameters
         * @param {String} opts.conditions 检索条件
         * @param {module:api/ContactApi~selectContactListCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Object}
         */
        this.selectContactList = function(caseId, opts, callback) {
            opts = opts || {};
            var postBody = null;

            // verify the required parameter 'caseId' is set
            if (caseId == undefined || caseId == null) {
                throw new Error("Missing the required parameter 'caseId' when calling selectContactList");
            }


            var pathParams = {
                'caseId': caseId
            };
            var queryParams = {
                'conditions': opts['conditions']
            };
            var headerParams = {
            };
            var formParams = {
            };

            var authNames = [];
            var contentTypes = [];
            var accepts = ['application/json'];
            var returnType = Object;

            return this.apiClient.callApi(
                '/contact/{caseId}', 'GET',
                pathParams, queryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType, callback
            );
        }

        /**
         * Callback function to receive the result of the updateContactNotes operation.
         * @callback module:api/ContactApi~updateContactNotesCallback
         * @param {String} error Error message, if any.
         * @param {Object} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * 联系人批注
         * 联系人批注
         * @param {String} caseId 案件id
         * @param {String} contactId 联系人id
         * @param {String} notes 批注内容
         * @param {module:api/ContactApi~updateContactNotesCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Object}
         */
        this.updateContactNotes = function(caseId, contactId, notes, callback) {
            var postBody = null;

            // verify the required parameter 'caseId' is set
            if (caseId == undefined || caseId == null) {
                throw new Error("Missing the required parameter 'caseId' when calling updateContactNotes");
            }

            // verify the required parameter 'contactId' is set
            if (contactId == undefined || contactId == null) {
                throw new Error("Missing the required parameter 'contactId' when calling updateContactNotes");
            }

            // verify the required parameter 'notes' is set
            if (notes == undefined || notes == null) {
                throw new Error("Missing the required parameter 'notes' when calling updateContactNotes");
            }


            var pathParams = {
                'caseId': caseId,
                'contactId': contactId
            };
            var queryParams = {
                'notes': notes
            };
            var headerParams = {
            };
            var formParams = {
            };

            var authNames = [];
            var contentTypes = [];
            var accepts = ['application/json'];
            var returnType = Object;

            return this.apiClient.callApi(
                '/contact/{caseId}/{contactId}/notes', 'PUT',
                pathParams, queryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType, callback
            );
        }

        /**
         * Callback function to receive the result of the updateContactTag operation.
         * @callback module:api/ContactApi~updateContactTagCallback
         * @param {String} error Error message, if any.
         * @param {Object} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * 附件修改标签
         * 附件修改标签
         * @param {String} caseId 案件id
         * @param {String} contactId 联系人id
         * @param {String} tags 附加的标签列表：array
         * @param {module:api/ContactApi~updateContactTagCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Object}
         */
        this.updateContactTag = function(caseId, contactId, tags, callback) {
            var postBody = null;

            // verify the required parameter 'caseId' is set
            if (caseId == undefined || caseId == null) {
                throw new Error("Missing the required parameter 'caseId' when calling updateContactTag");
            }

            // verify the required parameter 'contactId' is set
            if (contactId == undefined || contactId == null) {
                throw new Error("Missing the required parameter 'contactId' when calling updateContactTag");
            }

            // verify the required parameter 'tags' is set
            if (tags == undefined || tags == null) {
                throw new Error("Missing the required parameter 'tags' when calling updateContactTag");
            }


            var pathParams = {
                'caseId': caseId,
                'contactId': contactId
            };
            var queryParams = {
                'tags': tags
            };
            var headerParams = {
            };
            var formParams = {
            };

            var authNames = [];
            var contentTypes = [];
            var accepts = ['application/json'];
            var returnType = Object;

            return this.apiClient.callApi(
                '/contact/{caseId}/{contactId}/tag', 'PUT',
                pathParams, queryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType, callback
            );
        }
    };

    return exports;
}));
