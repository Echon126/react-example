/**
 * cInsight-gui
 * The Case Analysis Software
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function (root, factory) {
    if (false) {
        // AMD. Register as an anonymous module.
        define(['ApiClient', 'model/CaseInfo', 'model/Error', 'model/InlineResponse200'], factory);
    } else if (typeof module === 'object' && module.exports) {
        // CommonJS-like environments that support module.exports, like Node.
        module.exports = factory(require('../ApiClient'), require('../model/CaseInfo'), require('../model/Error'), require('../model/InlineResponse200'));
    } else {
        // Browser globals (root is window)
        if (!root.CInsightGui) {
            root.CInsightGui = {};
        }
        root.CInsightGui.CaseApi = factory(root.CInsightGui.ApiClient, root.CInsightGui.CaseInfo, root.CInsightGui.Error, root.CInsightGui.InlineResponse200);
    }
}(this, function (ApiClient, CaseInfo, Error, InlineResponse200) {
    'use strict';

    /**
     * Case service.
     * @module api/CaseApi
     * @version 1.0.0
     */

    /**
     * Constructs a new CaseApi.
     * @alias module:api/CaseApi
     * @class
     * @param {module:ApiClient} apiClient Optional API client implementation to use,
     * default to {@link module:ApiClient#instance} if unspecified.
     */
    var exports = function (apiClient) {
        this.apiClient = apiClient || ApiClient.instance;


        /**
         * Callback function to receive the result of the activateCase operation.
         * @callback module:api/CaseApi~activateCaseCallback
         * @param {String} error Error message, if any.
         * @param {Object} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * 案件激活
         * 案件激活（激活引擎案件切换）
         * @param {String} caseId 案件id
         * @param {module:api/CaseApi~activateCaseCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Object}
         */
        this.activateCase = function (caseId, callback) {
            var postBody = null;

            // verify the required parameter 'caseId' is set
            if (caseId == undefined || caseId == null) {
                throw new Error("Missing the required parameter 'caseId' when calling activateCase");
            }


            var pathParams = {
                'caseId': caseId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};

            var authNames = [];
            var contentTypes = [];
            var accepts = ['application/json'];
            var returnType = Object;

            return this.apiClient.callApi(
                '/case/activate/{caseId}', 'PUT',
                pathParams, queryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType, callback
            );
        }

        /**
         * Callback function to receive the result of the createCase operation.
         * @callback module:api/CaseApi~createCaseCallback
         * @param {String} error Error message, if any.
         * @param {Object} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * 新建案件
         * 新建案件
         * @param {String} caseCode 案件编号（唯一）
         * @param {String} caseName 案件名称
         * @param {String} caseOperator 负责人
         * @param {String} kickoffDate 立案日期
         * @param {Object} opts Optional parameters
         * @param {String} opts.remark 备注
         * @param {module:api/CaseApi~createCaseCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Object}
         */
        this.createCase = function (caseCode, caseName, caseOperator, kickoffDate, opts, callback) {
            opts = opts || {};
            var postBody = null;

            // verify the required parameter 'caseCode' is set
            if (caseCode == undefined || caseCode == null) {
                throw new Error("Missing the required parameter 'caseCode' when calling createCase");
            }

            // verify the required parameter 'caseName' is set
            if (caseName == undefined || caseName == null) {
                throw new Error("Missing the required parameter 'caseName' when calling createCase");
            }

            // verify the required parameter 'caseOperator' is set
            if (caseOperator == undefined || caseOperator == null) {
                throw new Error("Missing the required parameter 'caseOperator' when calling createCase");
            }

            // verify the required parameter 'kickoffDate' is set
            if (kickoffDate == undefined || kickoffDate == null) {
                throw new Error("Missing the required parameter 'kickoffDate' when calling createCase");
            }


            var pathParams = {};
            var queryParams = {
                'caseCode': caseCode,
                'caseName': caseName,
                'caseOperator': caseOperator,
                'kickoffDate': kickoffDate,
                'remark': opts['remark']
            };
            var headerParams = {};
            var formParams = {};

            var authNames = [];
            var contentTypes = [];
            var accepts = ['application/json'];
            var returnType = Object;

            return this.apiClient.callApi(
                '/case', 'POST',
                pathParams, queryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType, callback
            );
        }

        /**
         * Callback function to receive the result of the deleteCase operation.
         * @callback module:api/CaseApi~deleteCaseCallback
         * @param {String} error Error message, if any.
         * @param {Object} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * 删除案件
         * 删除案件
         * @param {String} caseId 案件id
         * @param {module:api/CaseApi~deleteCaseCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Object}
         */
        this.deleteCase = function (caseId, callback) {
            var postBody = null;

            // verify the required parameter 'caseId' is set
            if (caseId == undefined || caseId == null) {
                throw new Error("Missing the required parameter 'caseId' when calling deleteCase");
            }


            var pathParams = {
                'caseId': caseId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};

            var authNames = [];
            var contentTypes = [];
            var accepts = ['application/json'];
            var returnType = Object;

            return this.apiClient.callApi(
                '/case/{caseId}', 'DELETE',
                pathParams, queryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType, callback
            );
        }

        /**
         * Callback function to receive the result of the generatorCaseCode operation.
         * @callback module:api/CaseApi~generatorCaseCodeCallback
         * @param {String} error Error message, if any.
         * @param {module:model/InlineResponse200} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * 生成案件编号
         * 生成唯一可用的案件编号
         * @param {module:api/CaseApi~generatorCaseCodeCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link module:model/InlineResponse200}
         */
        this.generatorCaseCode = function (callback) {
            var postBody = null;


            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};

            var authNames = [];
            var contentTypes = [];
            var accepts = ['application/json'];
            var returnType = InlineResponse200;

            return this.apiClient.callApi(
                '/case/generator', 'POST',
                pathParams, queryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType, callback
            );
        }

        /**
         * Callback function to receive the result of the selectCaseList operation.
         * @callback module:api/CaseApi~selectCaseListCallback
         * @param {String} error Error message, if any.
         * @param {Array.<module:model/CaseInfo>} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * 获取案件列表
         * 获取案件列表（默认按&lt;最后查看时间&gt;倒序排列）
         * @param {module:api/CaseApi~selectCaseListCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Array.<module:model/CaseInfo>}
         */
        this.selectCaseList = function (callback) {
            var postBody = null;


            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};

            var authNames = [];
            var contentTypes = [];
            var accepts = ['application/json'];
            var returnType = [CaseInfo];

            return this.apiClient.callApi(
                '/case', 'GET',
                pathParams, queryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType, callback
            );
        }

        /**
         * Callback function to receive the result of the updateCase operation.
         * @callback module:api/CaseApi~updateCaseCallback
         * @param {String} error Error message, if any.
         * @param {Object} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * 编辑案件
         * 编辑案件
         * @param {String} caseId 案件id
         * @param {String} caseName 案件名称
         * @param {String} caseOperator 负责人
         * @param {String} kickoffDate 立案日期
         * @param {Object} opts Optional parameters
         * @param {String} opts.remark 备注
         * @param {module:api/CaseApi~updateCaseCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Object}
         */
        this.updateCase = function (caseId, caseName, caseOperator, kickoffDate, opts, callback) {
            opts = opts || {};
            var postBody = null;

            // verify the required parameter 'caseId' is set
            if (caseId == undefined || caseId == null) {
                throw new Error("Missing the required parameter 'caseId' when calling updateCase");
            }

            // verify the required parameter 'caseName' is set
            if (caseName == undefined || caseName == null) {
                throw new Error("Missing the required parameter 'caseName' when calling updateCase");
            }

            // verify the required parameter 'caseOperator' is set
            if (caseOperator == undefined || caseOperator == null) {
                throw new Error("Missing the required parameter 'caseOperator' when calling updateCase");
            }

            // verify the required parameter 'kickoffDate' is set
            if (kickoffDate == undefined || kickoffDate == null) {
                throw new Error("Missing the required parameter 'kickoffDate' when calling updateCase");
            }


            var pathParams = {
                'caseId': caseId
            };
            var queryParams = {
                'caseName': caseName,
                'caseOperator': caseOperator,
                'kickoffDate': kickoffDate,
                'remark': opts['remark']
            };
            var headerParams = {};
            var formParams = {};

            var authNames = [];
            var contentTypes = [];
            var accepts = ['application/json'];
            var returnType = Object;

            return this.apiClient.callApi(
                '/case/{caseId}', 'PUT',
                pathParams, queryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType, callback
            );
        }
    };

    return exports;
}));
