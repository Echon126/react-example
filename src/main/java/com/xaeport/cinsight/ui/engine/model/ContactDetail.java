/*
 * 案件分析引擎
 * 案件分析引擎
 *
 * OpenAPI spec version: 1.0.0
 * Contact: cinsight@xaeport.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.xaeport.cinsight.ui.engine.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * ContactDetail
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-06-21T07:16:57.704Z")
public class ContactDetail {
    @SerializedName("contactId")
    private String contactId = null;

    @SerializedName("contactName")
    private String contactName = null;

    @SerializedName("diagram")
    private List<Diagram> diagram = new ArrayList<Diagram>();

    @SerializedName("tag")
    private String tag = null;

    @SerializedName("note")
    private String note = null;

    public ContactDetail contactId(String contactId) {
        this.contactId = contactId;
        return this;
    }

    /**
     * 联系人id
     *
     * @return contactId
     **/
    @ApiModelProperty(example = "null", value = "联系人id")
    public String getContactId() {
        return contactId;
    }

    public void setContactId(String contactId) {
        this.contactId = contactId;
    }

    public ContactDetail contactName(String contactName) {
        this.contactName = contactName;
        return this;
    }

    /**
     * 联系人name
     *
     * @return contactName
     **/
    @ApiModelProperty(example = "null", value = "联系人name")
    public String getContactName() {
        return contactName;
    }

    public void setContactName(String contactName) {
        this.contactName = contactName;
    }

    public ContactDetail diagram(List<Diagram> diagram) {
        this.diagram = diagram;
        return this;
    }

    public ContactDetail addDiagramItem(Diagram diagramItem) {
        this.diagram.add(diagramItem);
        return this;
    }

    /**
     * 收发件数量趋势图
     *
     * @return diagram
     **/
    @ApiModelProperty(example = "null", value = "收发件数量趋势图")
    public List<Diagram> getDiagram() {
        return diagram;
    }

    public void setDiagram(List<Diagram> diagram) {
        this.diagram = diagram;
    }

    public ContactDetail tag(String tag) {
        this.tag = tag;
        return this;
    }

    /**
     * 标签json
     *
     * @return tag
     **/
    @ApiModelProperty(example = "null", value = "标签json")
    public String getTag() {
        return tag;
    }

    public void setTag(String tag) {
        this.tag = tag;
    }

    public ContactDetail note(String note) {
        this.note = note;
        return this;
    }

    /**
     * 批注内容
     *
     * @return note
     **/
    @ApiModelProperty(example = "null", value = "批注内容")
    public String getNote() {
        return note;
    }

    public void setNote(String note) {
        this.note = note;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ContactDetail contactDetail = (ContactDetail) o;
        return Objects.equals(this.contactId, contactDetail.contactId) &&
                Objects.equals(this.contactName, contactDetail.contactName) &&
                Objects.equals(this.diagram, contactDetail.diagram) &&
                Objects.equals(this.tag, contactDetail.tag) &&
                Objects.equals(this.note, contactDetail.note);
    }

    @Override
    public int hashCode() {
        return Objects.hash(contactId, contactName, diagram, tag, note);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ContactDetail {\n");

        sb.append("    contactId: ").append(toIndentedString(contactId)).append("\n");
        sb.append("    contactName: ").append(toIndentedString(contactName)).append("\n");
        sb.append("    diagram: ").append(toIndentedString(diagram)).append("\n");
        sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
        sb.append("    note: ").append(toIndentedString(note)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

